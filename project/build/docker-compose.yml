version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.9
    container_name: zookeeper
    hostname: zookeeper
    healthcheck:
      test: "[[ $$(echo srvr | nc localhost 2181 | grep -oG 'Mode: standalone') = \"Mode: standalone\" ]]"
      interval: 10s
      timeout: 1s
      retries: 30
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.0.9
    container_name: kafka
    hostname: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: "test $$( /usr/bin/zookeeper-shell zookeeper:2181 get /brokers/ids/1 | grep { ) != ''"
      interval: 3s
      timeout: 2s
      retries: 300
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_DOCKER_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9191,LISTENER_DOCKER_INTERNAL://:9091
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      KAFKA_NUM_PARTITIONS: 4
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
      KAFKA_JMX_HOSTNAME: kafka
      EXTRA_ARGS: "-javaagent:/opt/kafka/jmx_javaagent/jmx_prometheus_javaagent-0.20.0.jar=7071:/opt/kafka/jmx_javaagent/kafka-2_0_0.yml"
    volumes:
      - ./kafka/jmx_exporter:/opt/kafka/jmx_javaagent
    ports:
      - "9191:9191"
      - "9091:9091"
      - "7071:7071"

  kafka-init-container:
    image: confluentinc/cp-kafka:7.0.9
    container_name: kafka-init-container
    volumes:
      - ./connect/postgres-connector.json:/connect/postgres-connector.json
    depends_on:
      kafka:
        condition: service_healthy
      connect:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # rather than giving sleep 15 use this 
      # to block init container to wait for Kafka broker to be ready  
      kafka-topics --bootstrap-server kafka:9191 --list

      # create init topics
      kafka-topics --create --topic receiver-topic --partitions 8 --bootstrap-server kafka:9191
      kafka-topics --create --topic processor-topic --partitions 1 --bootstrap-server kafka:9191
      kafka-topics --create --topic postgres-topic --partitions 1 --bootstrap-server kafka:9191
      kafka-topics --create --topic clickhouse-topic --partitions 1 --bootstrap-server kafka:9191
      
      # create kafka connectors
      curl -vvv --location --request POST 'http://connect:8083/connectors' \
        --header 'Content-Type: application/json' \
        --data-binary '@/connect/postgres-connector.json'
      
      exit 0
      "

  connect:
    image: confluentinc/cp-kafka-connect:7.0.9
    container_name: connect
    hostname: connect
    healthcheck:
      test: "curl --fail http://localhost:8083 || exit 1"
      interval: 10s
      timeout: 2s
      retries: 300
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8085:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9191"
      CONNECT_REST_ADVERTISED_HOST_NAME: "localhost"
      CONNECT_REST_PORT: "8083"
      CONNECT_GROUP_ID: "local-connect"
      CONNECT_CONFIG_STORAGE_TOPIC: "kafka-connect-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "kafka-connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "kafka-connect-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_PLUGIN_PATH: /usr/share/java/,/etc/kafka-connect/jars
    volumes:
      - ./connect:/etc/kafka-connect/jars

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.29.0
    container_name: ksqldb-server
    hostname: ksqldb-server
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: "curl --fail http://0.0.0.0:8088 || exit 1"
      interval: 10s
      timeout: 2s
      retries: 300
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: "kafka:9191"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_CONNECT_URL: http://connect:8083

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.29.0
    container_name: ksqldb-cli
    hostname: ksqldb-cli
    depends_on:
      kafka:
        condition: service_healthy
      ksqldb-server:
        condition: service_healthy
      kafka-init-container:
        condition: service_completed_successfully
    volumes:
      - ./ksqldb/script.sql:/data/script.sql
#    entrypoint: /bin/sh
#    tty: true
    entrypoint:
      - /bin/bash
      - -c
      - |
        sleep 15
        echo -e "\n\n⏳ Waiting for ksqlDB to be available before launching CLI\n"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://ksqldb-server:8088/) -eq 000 ]
        do 
          echo -e $$(date) "ksqlDB Server HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://ksqldb-server:8088/) " (waiting for 200)"
          sleep 5
        done
        echo -e "\n\n-> Running SQL commands\n"
        cat /data/script.sql <(echo -e '\nEXIT')| ksql http://ksqldb-server:8088
        echo -e "\n\n-> Sleeping…\n"
        sleep infinity  

  kafka-exporter:
    image: bitnami/kafka-exporter:1.7.0
    container_name: kafka-exporter
    hostname: kafka-exporter
    ports:
      - "9308:9308"
    command:
      - --kafka.server=kafka:9091
    depends_on:
      kafka:
        condition: service_healthy

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    hostname: kafka-ui
    ports:
      - "8080:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9191"
    depends_on:
      - "kafka"

  grafana:
    image: grafana/grafana:9.2.3
    container_name: grafana
    hostname: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: password
      GF_USERS_ALLOW_SIGN_UP: "false"
      TZ: "Europe/Moscow"

  prometheus:
    image: prom/prometheus:v2.39.1
    container_name: prometheus
    hostname: prometheus
    volumes:
      - ./prometheus:/etc/prometheus/
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"

  receiver:
    image: astrviktor/receiver:1.0.0
    container_name: receiver
    hostname: receiver
    ports:
      - "8001:8001"
    environment:
      RECEIVER_KAFKA_BOOTSTRAPSERVERS: "kafka:9191"
      RECEIVER_RECEIVER_HOST: "0.0.0.0"
      RECEIVER_RECEIVER_PORT: "8001"
      RECEIVER_RECEIVER_MINSLEEP: "99"
      RECEIVER_RECEIVER_MAXSLEEP: "100"
    depends_on:
      kafka-init-container:
        condition: service_completed_successfully

  processor:
    image: astrviktor/processor:1.0.0
#    container_name: processor
    hostname: processor
#    ports:
#      - "8002:8002"
    environment:
      PROCESSOR_KAFKA_BOOTSTRAPSERVERS: "kafka:9191"
      PROCESSOR_PROCESSOR_HOST: "0.0.0.0"
      PROCESSOR_PROCESSOR_PORT: "8002"
    depends_on:
      kafka-init-container:
        condition: service_completed_successfully
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr

  converter:
    image: astrviktor/converter:1.0.0
    container_name: converter
    hostname: converter
    ports:
      - "8003:8003"
    environment:
      CONVERTER_KAFKA_BOOTSTRAPSERVERS: "kafka:9191"
      CONVERTER_CONVERTER_HOST: "0.0.0.0"
      CONVERTER_CONVERTER_PORT: "8003"
    depends_on:
      kafka-init-container:
        condition: service_completed_successfully

  informer:
    image: astrviktor/informer:1.0.0
    container_name: informer
    hostname: informer
    ports:
      - "8004:8004"
    environment:
      INFORMER_INFORMER_HOST: "0.0.0.0"
      INFORMER_INFORMER_PORT: "8004"
      INFORMER_INFORMER_REQUESTHOST: "ksqldb-server"
      INFORMER_INFORMER_REQUESTPOST: "8088"
    depends_on:
      kafka-init-container:
        condition: service_completed_successfully

  postgres:
    image: postgres:16.1
    container_name: postgres
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: password
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse
    hostname: clickhouse
    depends_on:
      kafka:
        condition: service_healthy
      connect:
        condition: service_healthy
      kafka-init-container:
        condition: service_completed_successfully
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - ./clickhouse/clickhouse.sql:/docker-entrypoint-initdb.d/init.sql

  yandex-tank:
    build: ./yandex-tank
    volumes:
      - ./yandex-tank/post.yaml:/var/loadtest/post.yaml
      - ./yandex-tank/post.sh:/var/loadtest/post.sh
      - ./yandex-tank/ammo.txt:/var/loadtest/ammo.txt
    container_name: yandex-tank
    network_mode: "host"