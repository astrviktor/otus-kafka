version: '2.4'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.9
    container_name: zookeeper
    hostname: zookeeper
    healthcheck:
      test: "[[ $$(echo srvr | nc localhost 2181 | grep -oG 'Mode: standalone') = \"Mode: standalone\" ]]"
      interval: 10s
      timeout: 1s
      retries: 30
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.0.9
    container_name: kafka
    hostname: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: "test $$( /usr/bin/zookeeper-shell zookeeper:2181 get /brokers/ids/1 | grep { ) != ''"
      interval: 3s
      timeout: 2s
      retries: 300
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_DOCKER_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9191,LISTENER_DOCKER_INTERNAL://:9091
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      KAFKA_NUM_PARTITIONS: 4
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
      KAFKA_JMX_HOSTNAME: kafka
      EXTRA_ARGS: "-javaagent:/opt/kafka/jmx_javaagent/jmx_prometheus_javaagent-0.20.0.jar=7071:/opt/kafka/jmx_javaagent/kafka-2_0_0.yml"
    volumes:
      - ./jmx_exporter:/opt/kafka/jmx_javaagent
    ports:
      - "9191:9191"
      - "9091:9091"
      - "7071:7071"

  init-kafka-container:
    image: confluentinc/cp-kafka:7.0.9
    container_name: init-kafka-container
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # rather than giving sleep 15 use this 
      # to block init container to wait for Kafka broker to be ready  
      kafka-topics --bootstrap-server kafka:9191 --list

      # create init topics
      kafka-topics --create --topic receiver-topic --partitions 8 --bootstrap-server kafka:9191
      kafka-topics --create --topic processor-topic --partitions 1 --bootstrap-server kafka:9191 
      "

  kafka-exporter:
    image: bitnami/kafka-exporter:1.7.0
    container_name: kafka-exporter
    hostname: kafka-exporter
    ports:
      - "9308:9308"
    command:
      - --kafka.server=kafka:9091
    depends_on:
      kafka:
        condition: service_healthy


  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    hostname: kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9191"
    depends_on:
      - "kafka"

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    hostname: kafka-ui
    ports:
      - "8080:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9191"
    depends_on:
      - "kafka"

  grafana:
    image: grafana/grafana:9.2.3
    container_name: grafana
    hostname: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: password
      GF_USERS_ALLOW_SIGN_UP: "false"
      TZ: "Europe/Moscow"

  prometheus:
    image: prom/prometheus:v2.39.1
    container_name: prometheus
    hostname: prometheus
    volumes:
      - ./prometheus:/etc/prometheus/
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"

  receiver:
    image: astrviktor/receiver:1.0.0
    container_name: receiver
    hostname: receiver
    ports:
      - "8081:8081"
    environment:
      RECEIVER_KAFKA_BOOTSTRAPSERVERS: "kafka:9191"
      RECEIVER_RECEIVER_HOST: "0.0.0.0"
      RECEIVER_RECEIVER_PORT: "8081"
    depends_on:
      kafka:
        condition: service_healthy

  processor:
    image: astrviktor/processor:1.0.0
    container_name: processor
    hostname: processor
    ports:
      - "8082:8082"
    environment:
      PROCESSOR_KAFKA_BOOTSTRAPSERVERS: "kafka:9191"
      PROCESSOR_PROCESSOR_HOST: "0.0.0.0"
      PROCESSOR_PROCESSOR_PORT: "8082"
    depends_on:
      kafka:
        condition: service_healthy

  yandex-tank:
    build: ./yandex-tank
    volumes:
      - ./yandex-tank/post.yaml:/var/loadtest/post.yaml
      - ./yandex-tank/post.sh:/var/loadtest/post.sh
      - ./yandex-tank/ammo.txt:/var/loadtest/ammo.txt
    container_name: yandex-tank
    network_mode: "host"